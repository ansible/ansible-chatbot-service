//
// vim:syntax=plantuml
//

// Generate PNG image with sequence diagram by using the following command:
// java -jar plantuml.jar sequence_diagram.uml
//
// Generate SVG drawing with sequence diagram by using the following command:
// java -jar plantuml.jar -tsvg sequence_diagram.uml

@startuml
skin rose

header Sequence diagram for Road-core service
footer Copyright Â© 2024 Red Hat, Inc. Author: Pavel Tisnovsky

actor "User" as user
participant "Road-core\nservice" as rcs
control "Redactor" as redactor
control "Question\nValidator" as question_validator
control "Document\nSummarizer" as document_summarizer
database "Conversation\ncache" as cache
database "Vector\ndatabase" as vector_db
collections "LLM" as llm

== Question ==

user -> rcs: Question

== Redaction ==

rcs -> redactor: Redact query
redactor -> rcs: Redacted query

== Conversation history ==

rcs -> cache: Retrieve conversation history
cache -> rcs: Conversation history

== Attachments ==

rcs -> rcs: Retrieve attachments from request
rcs -> rcs: Attachments
rcs -> redactor: Redact attachments
redactor -> rcs: Redacted attachments

== Validation ==

rcs -> question_validator: Validate question
question_validator -> llm: Query
llm -> question_validator: Valid or invalid

== Answer generation ==

alt "Invalid question case"
question_validator -> rcs: Invalid question
rcs -> user: Your question\nis not valid
end

alt "Valid question case"
question_validator -> rcs: Valid question
rcs -> document_summarizer: Summarize document
document_summarizer -> vector_db: Read vector DB (RAG)
vector_db -> document_summarizer: RAG DB content
document_summarizer -> llm: Query
llm -> document_summarizer: Answer
document_summarizer -> rcs: Summary
rcs -> user: Answer to\nyour question
end



@enduml
